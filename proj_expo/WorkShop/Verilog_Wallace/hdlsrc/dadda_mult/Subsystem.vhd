-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\dadda_mult\Subsystem.vhd
-- Created: 2015-12-15 12:20:02
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0
-- Target subsystem base rate: 0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: dadda_mult/Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem IS
  PORT( In1                               :   IN    real;  -- double
        In2                               :   IN    real;  -- double
        In3                               :   IN    real;  -- double
        In4                               :   IN    real;  -- double
        In5                               :   IN    real;  -- double
        In6                               :   IN    real;  -- double
        In7                               :   IN    real;  -- double
        In8                               :   IN    real;  -- double
        In9                               :   IN    real;  -- double
        In10                              :   IN    real;  -- double
        In11                              :   IN    real;  -- double
        In12                              :   IN    real;  -- double
        In13                              :   IN    real;  -- double
        In14                              :   IN    real;  -- double
        In15                              :   IN    real;  -- double
        In16                              :   IN    real;  -- double
        In17                              :   IN    real;  -- double
        In18                              :   IN    real;  -- double
        In19                              :   IN    real;  -- double
        In20                              :   IN    real;  -- double
        Out1                              :   OUT   std_logic;
        Out2                              :   OUT   std_logic;
        Out3                              :   OUT   std_logic;
        Out4                              :   OUT   std_logic;
        Out5                              :   OUT   std_logic;
        Out6                              :   OUT   std_logic;
        Out7                              :   OUT   std_logic;
        Out8                              :   OUT   std_logic
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  -- Component Declarations
  COMPONENT Step1
    PORT( a4                              :   IN    real;  -- double
          a2                              :   IN    real;  -- double
          a3                              :   IN    real;  -- double
          a1                              :   IN    real;  -- double
          b0                              :   IN    real;  -- double
          P03                             :   OUT   std_logic;
          P02                             :   OUT   std_logic;
          P01                             :   OUT   std_logic;
          P00                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Step2
    PORT( a4                              :   IN    real;  -- double
          a2                              :   IN    real;  -- double
          a3                              :   IN    real;  -- double
          a1                              :   IN    real;  -- double
          b0                              :   IN    real;  -- double
          P03                             :   OUT   std_logic;
          P02                             :   OUT   std_logic;
          P01                             :   OUT   std_logic;
          P00                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HA
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          hS                              :   OUT   std_logic;
          hC                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Step3
    PORT( a4                              :   IN    real;  -- double
          a2                              :   IN    real;  -- double
          a3                              :   IN    real;  -- double
          a1                              :   IN    real;  -- double
          b0                              :   IN    real;  -- double
          P03                             :   OUT   std_logic;
          P02                             :   OUT   std_logic;
          P01                             :   OUT   std_logic;
          P00                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HA1
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          hS                              :   OUT   std_logic;
          hC                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Step4
    PORT( a4                              :   IN    real;  -- double
          a2                              :   IN    real;  -- double
          a3                              :   IN    real;  -- double
          a1                              :   IN    real;  -- double
          b0                              :   IN    real;  -- double
          P03                             :   OUT   std_logic;
          P02                             :   OUT   std_logic;
          P01                             :   OUT   std_logic;
          P00                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA1
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA2
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HA2
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          hS                              :   OUT   std_logic;
          hC                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA3
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA4
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HA3
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          hS                              :   OUT   std_logic;
          hC                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA5
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA6
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FA7
    PORT( A                               :   IN    std_logic;
          B                               :   IN    std_logic;
          C                               :   IN    std_logic;
          S                               :   OUT   std_logic;
          Ca                              :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Step1
    USE ENTITY work.Step1(rtl);

  FOR ALL : Step2
    USE ENTITY work.Step2(rtl);

  FOR ALL : HA
    USE ENTITY work.HA(rtl);

  FOR ALL : Step3
    USE ENTITY work.Step3(rtl);

  FOR ALL : FA
    USE ENTITY work.FA(rtl);

  FOR ALL : HA1
    USE ENTITY work.HA1(rtl);

  FOR ALL : Step4
    USE ENTITY work.Step4(rtl);

  FOR ALL : FA1
    USE ENTITY work.FA1(rtl);

  FOR ALL : FA2
    USE ENTITY work.FA2(rtl);

  FOR ALL : HA2
    USE ENTITY work.HA2(rtl);

  FOR ALL : FA3
    USE ENTITY work.FA3(rtl);

  FOR ALL : FA4
    USE ENTITY work.FA4(rtl);

  FOR ALL : HA3
    USE ENTITY work.HA3(rtl);

  FOR ALL : FA5
    USE ENTITY work.FA5(rtl);

  FOR ALL : FA6
    USE ENTITY work.FA6(rtl);

  FOR ALL : FA7
    USE ENTITY work.FA7(rtl);

  -- Signals
  SIGNAL Step1_out1                       : std_logic;
  SIGNAL Step1_out2                       : std_logic;
  SIGNAL Step1_out3                       : std_logic;
  SIGNAL Step1_out4                       : std_logic;
  SIGNAL Step2_out1                       : std_logic;
  SIGNAL Step2_out2                       : std_logic;
  SIGNAL Step2_out3                       : std_logic;
  SIGNAL Step2_out4                       : std_logic;
  SIGNAL hS                               : std_logic;
  SIGNAL hC                               : std_logic;
  SIGNAL Step3_out1                       : std_logic;
  SIGNAL Step3_out2                       : std_logic;
  SIGNAL Step3_out3                       : std_logic;
  SIGNAL Step3_out4                       : std_logic;
  SIGNAL FA_out1                          : std_logic;
  SIGNAL FA_out2                          : std_logic;
  SIGNAL hS_1                             : std_logic;
  SIGNAL hC_1                             : std_logic;
  SIGNAL Step4_out1                       : std_logic;
  SIGNAL Step4_out2                       : std_logic;
  SIGNAL Step4_out3                       : std_logic;
  SIGNAL Step4_out4                       : std_logic;
  SIGNAL FA1_out1                         : std_logic;
  SIGNAL FA1_out2                         : std_logic;
  SIGNAL FA2_out1                         : std_logic;
  SIGNAL FA2_out2                         : std_logic;
  SIGNAL hS_2                             : std_logic;
  SIGNAL hC_2                             : std_logic;
  SIGNAL FA3_out1                         : std_logic;
  SIGNAL FA3_out2                         : std_logic;
  SIGNAL FA4_out1                         : std_logic;
  SIGNAL FA4_out2                         : std_logic;
  SIGNAL hS_3                             : std_logic;
  SIGNAL hC_3                             : std_logic;
  SIGNAL FA5_out1                         : std_logic;
  SIGNAL FA5_out2                         : std_logic;
  SIGNAL FA6_out1                         : std_logic;
  SIGNAL FA6_out2                         : std_logic;
  SIGNAL FA7_out1                         : std_logic;
  SIGNAL FA7_out2                         : std_logic;

BEGIN
  u_Step1 : Step1
    PORT MAP( a4 => In16,  -- double
              a2 => In17,  -- double
              a3 => In18,  -- double
              a1 => In19,  -- double
              b0 => In20,  -- double
              P03 => Step1_out1,
              P02 => Step1_out2,
              P01 => Step1_out3,
              P00 => Step1_out4
              );

  u_Step2 : Step2
    PORT MAP( a4 => In11,  -- double
              a2 => In12,  -- double
              a3 => In13,  -- double
              a1 => In14,  -- double
              b0 => In15,  -- double
              P03 => Step2_out1,
              P02 => Step2_out2,
              P01 => Step2_out3,
              P00 => Step2_out4
              );

  u_HA : HA
    PORT MAP( A => Step2_out4,
              B => Step1_out3,
              hS => hS,
              hC => hC
              );

  u_Step3 : Step3
    PORT MAP( a4 => In6,  -- double
              a2 => In7,  -- double
              a3 => In8,  -- double
              a1 => In9,  -- double
              b0 => In10,  -- double
              P03 => Step3_out1,
              P02 => Step3_out2,
              P01 => Step3_out3,
              P00 => Step3_out4
              );

  u_FA : FA
    PORT MAP( A => Step3_out4,
              B => Step2_out3,
              C => Step1_out2,
              S => FA_out1,
              Ca => FA_out2
              );

  u_HA1 : HA1
    PORT MAP( A => FA_out1,
              B => hC,
              hS => hS_1,
              hC => hC_1
              );

  u_Step4 : Step4
    PORT MAP( a4 => In1,  -- double
              a2 => In2,  -- double
              a3 => In3,  -- double
              a1 => In4,  -- double
              b0 => In5,  -- double
              P03 => Step4_out1,
              P02 => Step4_out2,
              P01 => Step4_out3,
              P00 => Step4_out4
              );

  u_FA1 : FA1
    PORT MAP( A => Step3_out3,
              B => Step2_out2,
              C => Step1_out1,
              S => FA1_out1,
              Ca => FA1_out2
              );

  u_FA2 : FA2
    PORT MAP( A => FA1_out1,
              B => FA_out2,
              C => hC_1,
              S => FA2_out1,
              Ca => FA2_out2
              );

  u_HA2 : HA2
    PORT MAP( A => Step4_out4,
              B => FA2_out1,
              hS => hS_2,
              hC => hC_2
              );

  u_FA3 : FA3
    PORT MAP( A => hC_2,
              B => FA2_out2,
              C => FA1_out2,
              S => FA3_out1,
              Ca => FA3_out2
              );

  u_FA4 : FA4
    PORT MAP( A => Step4_out3,
              B => Step3_out2,
              C => Step2_out1,
              S => FA4_out1,
              Ca => FA4_out2
              );

  u_HA3 : HA3
    PORT MAP( A => FA3_out1,
              B => FA4_out1,
              hS => hS_3,
              hC => hC_3
              );

  u_FA5 : FA5
    PORT MAP( A => hC_3,
              B => FA4_out2,
              C => FA3_out2,
              S => FA5_out1,
              Ca => FA5_out2
              );

  u_FA6 : FA6
    PORT MAP( A => FA5_out1,
              B => Step4_out2,
              C => Step3_out1,
              S => FA6_out1,
              Ca => FA6_out2
              );

  u_FA7 : FA7
    PORT MAP( A => Step4_out1,
              B => FA6_out2,
              C => FA5_out2,
              S => FA7_out1,
              Ca => FA7_out2
              );

  Out1 <= Step1_out4;

  Out2 <= hS;

  Out3 <= hS_1;

  Out4 <= hS_2;

  Out5 <= hS_3;

  Out6 <= FA6_out1;

  Out7 <= FA7_out1;

  Out8 <= FA7_out2;

END rtl;

